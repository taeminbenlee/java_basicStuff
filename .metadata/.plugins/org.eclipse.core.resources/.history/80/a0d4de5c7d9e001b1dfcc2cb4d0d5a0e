package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import DB.DBClose;
import DB.DBConnection;
import dto.HumanDto;
import dto.empDto;

public class empDao {
	Scanner sc = new Scanner(System.in);
	private static empDao dao = new empDao();
	
	private empDao() {
		DBConnection.initConnection();
	}
	
	public static empDao getInstance() {
		return dao;
	}
	
	public boolean addMember(empDto dto) {
		String sql = " INSERT INTO MYEMPLOYEES "
				+ " (SEQ, NAME, PHONENUM, EMAIL, SAL) "
				+ " VALUES( SEQ_MYEMPLOYEES.NEXTVAL, ?, ?, ?, ?) ";
		
		Connection conn = null;
		PreparedStatement psmt = null;		
		int count = 0;
		System.out.println("이름을 입력하세요: ");
		String name = sc.next();
		System.out.println("연락처를 입력하세요: ");
		String phonenum = sc.next();
		System.out.println("이메일을 입력하세요: ");
		String email = sc.next();
		System.out.println("급여를 입력하세요: ");
		String sal = sc.next();
		
		conn = DBConnection.getConnection();
		System.out.println("1/3 addMember success");
		try {
			psmt = conn.prepareStatement(sql);
			System.out.println("2/3 addMember success");
			psmt.setString(1, name);
			psmt.setString(2, phonenum);
			psmt.setString(3, email);
			psmt.setString(4, sal);
			
			count = psmt.executeUpdate();
			System.out.println("3/3 addMember success");
			System.out.println("사원추가 성공");
		} catch (SQLException e) {
			System.out.println("addMember fail");
			e.printStackTrace();
		} finally {
			DBClose.close(conn, psmt, null);	
			
		}
		
		return count>0?true:false;
		
	}
	
	
	 public boolean deleteMember(int seq) {
		 String sql = " DELETE FROM MYEMPLOYEES "
					+ " WHERE SEQ=? ";
		 
		Connection conn = null;
		PreparedStatement psmt = null;
		int count = 0;
		System.out.println("삭제할 사원의 번호를 입력하세요: ");
		seq = sc.nextInt();
		try {
			conn = DBConnection.getConnection();
			System.out.println("1/3 deleteMember");
			
			psmt = conn.prepareStatement(sql);
			psmt.setInt(1, seq);
			System.out.println("2/3 deleteMember");

			count = psmt.executeUpdate();
			System.out.println("3/3 deleteMember");
			
			
		} catch (SQLException e) {
			System.out.println("deleteMember fail");
			e.printStackTrace();
		}finally {
			DBClose.close(conn, psmt, null);
		}
		
		return count>0?true:false;
		
		
			
	 }
	 public empDto detailInfo(String name) {
		 String sql = " SELECT SEQ, NAME, PHONENUM, EMAIL, SAL "
		 		+ " FROM MYEMPLOYEES "
		 		+ " WHERE NAME LIKE '%" + name + "%'";
			
		 System.out.println("검색할 사원의 이름: ");
		 name = sc.next();
		
		 Connection conn = null;
		  PreparedStatement psmt = null;
		  ResultSet rs = null;
		  
		  empDto dto = null;
		  
		  try {
				conn = DBConnection.getConnection(); 
				 System.out.println("1/4 detailInfo"); 
				psmt = conn.prepareStatement(sql);
				 System.out.println("2/4 detailInfo"); 
				 psmt.setString(1, name);
				 rs= psmt.executeQuery();
				 System.out.println("3/4 detailInfo"); 

				 while (rs.next()) {
					 dto = new empDto(
							 			rs.getInt(1),
							 			rs.getString(2),
							 			rs.getString(3),
							 			rs.getString(4),
							 			rs.getString(5)
							 		
							 ); 
				 }
				 System.out.println("4/4 detailInfo"); 

			} catch (SQLException e) {
				 System.out.println("getMemberDetail fail"); 
				e.printStackTrace();
			} finally {
				DBClose.close(conn, psmt, rs);
			}
			  return dto;
		 
	 }
	
	 public boolean updateMember(int seq, String name, String phonenum, String email, String sal) {
		 String sql = " UPDATE MYEMPLOYEES "
		 		+ " SET NAME=?, PHONENUM=?, EMAIL=?, SAL=? "
		 		+ " WHERE SEQ=? ";
		 
		 System.out.println("정보를 수정할 사원번호: ");
		 seq = sc.nextInt();
		 System.out.println("수정할 이름: ");
		 name = sc.next();
		 System.out.println("수정할 연락처: ");
		 phonenum = sc.next();
		 System.out.println("수정할 이메일: ");
		 email = sc.next();
		 System.out.println("수정할 급여: ");
		 sal = sc.next();
		 
		 Connection conn = null;
			PreparedStatement psmt = null;
			int count = 0;
			
		
			try {
				conn = DBConnection.getConnection();
				System.out.println("1/3 updateMember success");
				
				psmt = conn.prepareStatement(sql);
				
				psmt.setString(1, name);
				psmt.setString(2, phonenum);
				psmt.setString(3, email);
				psmt.setString(4, sal);
				psmt.setInt(5, seq);
				System.out.println("2/3 updateMember success");
				
				
				count = psmt.executeUpdate();
				System.out.println("3/3 updateMember success");
			} catch (SQLException e) {
				System.out.println("updateMember fail");

				e.printStackTrace();
			} finally {
				DBClose.close(conn, psmt, null);
			}
			return count>0?true:false; 
		 
	 }
	
	public List<empDto> getAllMemberList() {
		 String sql = " SELECT SEQ, NAME, PHONENUM, EMAIL, SAL "
			  		+ " FROM MYEMPLOYEES ";
		 List<empDto>list = new ArrayList<empDto>();
		 	Connection conn = null;
			PreparedStatement psmt = null;
			ResultSet rs = null;
			
			try {
				conn = DBConnection.getConnection();
				System.out.println("1/4 getAllMemberList");
				psmt = conn.prepareStatement(sql);
				System.out.println("2/4 getAllMemberList");
				
				rs = psmt.executeQuery();
				System.out.println("3/4 getAllMemberList");

				while (rs.next()) {
					empDto dto = new empDto(
												rs.getInt(1),
												rs.getString(2),
												rs.getString(3),
												rs.getString(4),
												rs.getString(5)
												);
					list.add(dto);
				}
				System.out.println("4/4 getAllMemberList");

			} catch (SQLException e) {
				System.out.println("getAllMemberList fail");

				e.printStackTrace();
			} finally {
				DBClose.close(conn, psmt, rs);
			}
			return list;
		 
		 
	}
	
	
	
}
